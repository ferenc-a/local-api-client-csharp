// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kameleo.LocalApiClient
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// You can use the following API endpoints to communicate with the local
    /// running Kameleo programmatically.
    /// </summary>
    public partial interface IKameleoLocalApiClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Get the possible values for base profile filtering. We can filter
        /// the available values. With this we can see for example that what
        /// languages of profiles do we have for Windows profiles with Chrome.
        /// </summary>
        /// <param name='deviceType'>
        /// Filter option for the Device Type. Possible values are 'desktop',
        /// 'mobile'. For example set it to mobile if you only want to see what
        /// os families we have for mobile profiles.
        /// </param>
        /// <param name='osFamily'>
        /// Filter option for os family. Possible values are 'windows',
        /// 'macos', 'linux', 'android', 'ios'. For example set it to windows
        /// if you only want to see what languages we have for windows
        /// profiles.
        /// </param>
        /// <param name='browserProduct'>
        /// Filter option for browser product. Possible values are 'chrome',
        /// 'firefox', 'edge', 'safari'. For example set it to safari if you
        /// only want to see what os families we have for chrome profiles.
        /// </param>
        /// <param name='language'>
        /// Filter option for os language. Use ISO 639-1 language code format.
        /// For example set it to en-gb if you only want to see what browser
        /// products we have for English profiles.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BaseProfileSearchParameters>> GetBaseProfileSearchParametersWithHttpMessagesAsync(string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string language = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Filtering base profiles with some criteria. It will return X base
        /// profiles. It is not an idempotent method. This means if you are
        /// calling it twice after each other it may return a different set of
        /// base profiles.
        /// </summary>
        /// <param name='deviceType'>
        /// Filter option for the Device Type. Possible values are 'desktop',
        /// 'mobile'. For example set it to mobile if you only want to get
        /// mobile profiles.
        /// </param>
        /// <param name='osFamily'>
        /// Filter option for os family. Possible values are 'windows',
        /// 'macos', 'linux', 'android', 'ios'. For example set it to windows
        /// if you only want to get Windows profiles.
        /// </param>
        /// <param name='browserProduct'>
        /// Filter option for browser product. Possible values are 'chrome',
        /// 'firefox', 'edge', 'safari'. For example set it to safari if you
        /// only want to get profiles with Safari browser.
        /// </param>
        /// <param name='language'>
        /// Filter option for os language. Use ISO 639-1 language code format.
        /// For example set it to en-gb if you only want to get English
        /// profiles.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<BaseProfilePreview>>> SearchBaseProfilesWithHttpMessagesAsync(string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string language = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of the cookies of the profile.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<BrowserCookie>>> ListCookiesWithHttpMessagesAsync(System.Guid guid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a list of cookies to the profile. If cookies are already
        /// present for a domain, they will be overwritten.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<BrowserCookie>>> AddCookiesWithHttpMessagesAsync(System.Guid guid, IList<CookieRequest> body = default(IList<CookieRequest>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the cookies of the profile.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteCookiesWithHttpMessagesAsync(System.Guid guid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Health check request to test if Kameleo has been started and
        /// accepting connections.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HealthcheckWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Provides information about the user.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserInfoResponse>> GetUserInfoWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Terminates the Kameleo session by deauthenticating and exiting the
        /// CLI. It is important to call it after operating with Kameleo, so
        /// other users of the team account won't be logged out.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> TerminateApplicationWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Tests a provided proxy connection.
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TestProxyResponse>> TestProxyWithHttpMessagesAsync(TestProxyRequest body = default(TestProxyRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a preview list about profiles that are currently in the
        /// system.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ProfilePreview>>> ListProfilesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new profile based on a selected BaseProfile and inputs.
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProfileResponse>> CreateProfileWithHttpMessagesAsync(CreateProfileRequest body = default(CreateProfileRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates profile settings.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProfileResponse>> UpdateProfileWithHttpMessagesAsync(System.Guid guid, UpdateProfileRequest body = default(UpdateProfileRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a profile from the system.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProfileResponse>> ReadProfileWithHttpMessagesAsync(System.Guid guid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes profile from the system. When you are launching and
        /// stopping a big number of profiles for example for scraping it is
        /// recommended to call this after you have stopped the profile. This
        /// will free up disk space.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteProfileWithHttpMessagesAsync(System.Guid guid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the current status of the profile.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<StatusResponse>> GetProfileStatusWithHttpMessagesAsync(System.Guid guid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Starts a profile. The browser will be launched. In case of mobile
        /// profiles and external launcher types the external spoofing engine
        /// will be launched.
        /// If successful, the profile's lifetime state will be 'running'.
        /// Otherwise the profile's lifetime state will be 'terminated'. During
        /// the api call the lifetime state can be 'starting' for a
        /// temporarily.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<StatusResponse>> StartProfileWithHttpMessagesAsync(System.Guid guid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Starts a profile, for desktop profiles additional WebDriver
        /// settings can be provided. The browser will be launched. In case of
        /// mobile profiles and external launcher types the external spoofing
        /// engine will be launched.
        /// If successful, the profile's lifetime state will be 'running'.
        /// Otherwise the profile's lifetime state will be 'terminated'. During
        /// the api call the lifetime state can be 'starting' for a
        /// temporarily.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<StatusResponse>> StartProfileWithWebDriverSettingsWithHttpMessagesAsync(System.Guid guid, WebDriverSettings body = default(WebDriverSettings), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Stops a profile. The browsers will be stopped. In case of mobile
        /// profiles and external launcher types the external spoofing engine
        /// will be stopped.
        /// If successful, the profile's lifetime state will be 'terminated'.
        /// Otherwise the profile's lifetime state will be 'running'. During
        /// the api call the lifetime state can be 'terminating' for a
        /// temporarily.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<StatusResponse>> StopProfileWithHttpMessagesAsync(System.Guid guid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Saves a profile to a file. It will create a .kameleo file to the
        /// required location. It will store all the profile settings, browsing
        /// data, cookies, history, bookmarks, installed extension / addons.
        /// Later it can be reloaded.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProfileResponse>> SaveProfileWithHttpMessagesAsync(System.Guid guid, SaveProfileRequest body = default(SaveProfileRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Loads a profile from a file. It will load the profile from a
        /// .kameleo file. It will load all the profile settings, browsing
        /// data, cookies, history, bookmarks, installed extension / addons.
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProfileResponse>> LoadProfileWithHttpMessagesAsync(LoadProfileRequest body = default(LoadProfileRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
