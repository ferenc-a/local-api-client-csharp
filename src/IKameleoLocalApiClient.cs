// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kameleo.LocalApiClient
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// You can use the following API endpoints to communicate with the local
    /// running Kameleo programmatically.
    /// </summary>
    public partial interface IKameleoLocalApiClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Retrieves the available filtering options for base profiles,
        /// including device types, operating system families, browser
        /// products, and languages. This enables you to refine the selection,
        /// for example, to see which languages are available for profiles
        /// using Windows with Chrome.
        /// </summary>
        /// <param name='deviceType'>
        /// Filter option for the Device Type. Possible values are 'desktop',
        /// 'mobile'. For example set it to mobile if you only want to see what
        /// os families we have for mobile profiles.
        /// </param>
        /// <param name='osFamily'>
        /// Filter option for os family. Possible values are 'windows',
        /// 'macos', 'linux', 'android', 'ios'. For example set it to windows
        /// if you only want to see what languages we have for windows
        /// profiles.
        /// </param>
        /// <param name='browserProduct'>
        /// Filter option for browser product. Possible values are 'chrome',
        /// 'firefox', 'edge', 'safari'. For example set it to safari if you
        /// only want to see what os families we have for chrome profiles.
        /// </param>
        /// <param name='language'>
        /// Filter option for os language. Use ISO 639-1 language code format.
        /// For example set it to en-gb if you only want to see what browser
        /// products we have for English profiles.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BaseProfileSearchParameters>> GetBaseProfileSearchParametersWithHttpMessagesAsync(string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string language = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves a set of 25 base profiles based on specified criteria,
        /// with the most recent browser versions at the beginning of the list.
        /// Note that calling this method multiple times will return different
        /// sets of base profiles.
        /// </summary>
        /// <param name='deviceType'>
        /// Filter option for the Device Type. Possible values are 'desktop',
        /// 'mobile'.
        /// You can also use a comma-separated list to provide more than one
        /// value.
        /// </param>
        /// <param name='osFamily'>
        /// Filter option for os family. Possible values are 'windows',
        /// 'macos', 'linux', 'android', 'ios'.
        /// You can also use a comma-separated list to provide more than one
        /// value.
        /// </param>
        /// <param name='browserProduct'>
        /// Filter option for browser product. Possible values are 'chrome',
        /// 'firefox', 'edge', 'safari'.
        /// You can also use a comma-separated list to provide more than one
        /// value.
        /// </param>
        /// <param name='language'>
        /// Filter option for os language. Use ISO 639-1 language code format.
        /// For example, set it to en-gb if you want to get only English
        /// profiles from Great-Britain.
        /// You can also use a comma-separated list to provide more than one
        /// value.
        /// This field also supports wildcard for the sublanguage part: to
        /// retrieve both en-us, en-gb, and en-ca profiles, use 'en-*' as
        /// value.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<BaseProfilePreview>>> SearchBaseProfilesWithHttpMessagesAsync(string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string language = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves the list of cookies stored in the profile's browser. Note
        /// that this list does not include session cookies, which are not
        /// persisted between browser launches.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<BrowserCookie>>> ListCookiesWithHttpMessagesAsync(System.Guid guid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a list of cookies to the profile, allowing you to inject
        /// cookies before starting the profile. If cookies already exist for a
        /// domain, they will be replaced with the new ones.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<BrowserCookie>>> AddCookiesWithHttpMessagesAsync(System.Guid guid, IList<CookieRequest> body = default(IList<CookieRequest>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes all the cookies stored in the profile, which will likely
        /// log the profile out of all websites.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteCookiesWithHttpMessagesAsync(System.Guid guid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the list of folders including subfolders and profiles that are
        /// loaded in the current workspace.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ListFoldersResponse>> ListFoldersWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the folder with the sepcified Id from the current workspace.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the folder.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<FolderResponse>> ReadFolderWithHttpMessagesAsync(System.Guid guid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the details of an existing folder, not including its
        /// content.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the folder.
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<FolderResponse>> UpdateFolderWithHttpMessagesAsync(System.Guid guid, UpdateFolderRequest body = default(UpdateFolderRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a folder along with all its subfolders. Profiles within the
        /// folder will either be deleted or moved to the top-level based on
        /// the query parameters.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the folder.
        /// </param>
        /// <param name='includeProfiles'>
        /// Flag to indicate if the contained profiles should be deleted (true)
        /// or moved to the top-level (false).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeleteFolderResponse>> DeleteFolderWithHttpMessagesAsync(System.Guid guid, bool? includeProfiles = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new folder.
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<FolderResponse>> CreateFolderWithHttpMessagesAsync(CreateFolderRequest body = default(CreateFolderRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds the given profile to the specified folder.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the folder.
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProfileResponse>> AddProfileToFolderWithHttpMessagesAsync(System.Guid guid, AddProfileToFolderRequest body = default(AddProfileToFolderRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes the given profile from the specified folder.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the folder.
        /// </param>
        /// <param name='profileId'>
        /// The unique identifier of the profile.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProfileResponse>> RemoveProfileFromFolderWithHttpMessagesAsync(System.Guid guid, System.Guid profileId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reads the sharing options (list of users and roles).
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SharingOptionsResponse>> ReadSharingOptionsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the share access of the specified folder.
        /// </summary>
        /// <param name='guid'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<FolderResponse>> ShareGroupWithHttpMessagesAsync(System.Guid guid, ShareGroupRequest body = default(ShareGroupRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Health check request to test if Kameleo has been started and
        /// accepting connections.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> HealthcheckWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Provides information about the user.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserInfoResponse>> GetUserInfoWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Terminates the Kameleo session by deauthenticating and exiting the
        /// CLI. It is important to call it after operating with Kameleo, so
        /// other users of the team account won't be logged out.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> TerminateApplicationWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of the profiles that are loaded in the current
        /// workspace.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ProfilePreview>>> ListProfilesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new profile based on a selected BaseProfile and inputs.
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProfileResponse>> CreateProfileWithHttpMessagesAsync(CreateProfileRequest body = default(CreateProfileRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates profile settings.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProfileResponse>> UpdateProfileWithHttpMessagesAsync(System.Guid guid, UpdateProfileRequest body = default(UpdateProfileRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the profile with the specified ID from the current workspace.
        /// On startup, Kameleo will automatically scan and load profiles
        /// stored in your workspace folder.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProfileResponse>> ReadProfileWithHttpMessagesAsync(System.Guid guid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Irreversibly deletes a profile from the current workspace, freeing
        /// up disk space and removing all associated data. It is recommended
        /// to create a backup using the export function before deleting a
        /// profile, as this operation is permanent and can result in data
        /// loss.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteProfileWithHttpMessagesAsync(System.Guid guid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the current status information about a profile, including
        /// its save state, lifetime state, and the connection port for
        /// profiles using an external spoofing engine.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<StatusResponse>> GetProfileStatusWithHttpMessagesAsync(System.Guid guid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Starts the selected profile by transitioning its status to
        /// 'starting', launching the browser engine associated with the
        /// profile, and then changing its status to 'running'. If there is an
        /// error during start up, it will be 'terminated'. You can use the
        /// launcher property to override the browser engine before the first
        /// start.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<StatusResponse>> StartProfileWithHttpMessagesAsync(System.Guid guid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Starts the selected profile with additional command line arguments
        /// or browser profile options. The browser engine associated with the
        /// profile is launched, and then the profile's status is changed to
        /// 'running'. If there is an error during start-up, it will be
        /// 'terminated'. You can use the launcher property to override the
        /// browser engine before the first start.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<StatusResponse>> StartProfileWithOptionsWithHttpMessagesAsync(System.Guid guid, WebDriverSettings body = default(WebDriverSettings), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Stops the selected profile and optionally releases resources. The
        /// browser engine (desktop browsers or external spoofing engine)
        /// associated with the profile is closed, and the profile's status is
        /// changed to 'terminated'.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<StatusResponse>> StopProfileWithHttpMessagesAsync(System.Guid guid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Exports a profile to a file, creating a .kameleo file at the
        /// specified location. This file encapsulates everything about the
        /// profile including settings, browsing data, cookies, history,
        /// bookmarks, and any installed extensions/addons. This allows for the
        /// profile to be loaded again at a later time, and it can also be
        /// loaded into a different Kameleo instance.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProfileResponse>> ExportProfileWithHttpMessagesAsync(System.Guid guid, ExportProfileRequest body = default(ExportProfileRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a copy of the loaded profile, which is saved to the
        /// workspace on the filesystem. The duplicated profile will have a new
        /// ID, but will retain all the settings, browsing data, cookies,
        /// history, bookmarks, and installed extensions of the original
        /// profile.
        /// </summary>
        /// <param name='guid'>
        /// The unique identifier of the profile
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProfileResponse>> DuplicateProfileWithHttpMessagesAsync(System.Guid guid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Imports a profile from a .kameleo file, effectively recreating the
        /// profile with all its attributes, including settings, browsing data,
        /// cookies, history, bookmarks, and any installed extensions/addons.
        /// If the profile is already loaded, the import process will fail.
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProfileResponse>> ImportProfileWithHttpMessagesAsync(ImportProfileRequest body = default(ImportProfileRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upgrades the profile to the most recent browser version available
        /// from the server, tailored to the profile's current device, browser,
        /// operating system, and language settings. Note that upgrading a
        /// profile will alter its browser fingerprint.
        /// </summary>
        /// <param name='guid'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProfileResponse>> UpgradeProfileWithHttpMessagesAsync(System.Guid guid, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
