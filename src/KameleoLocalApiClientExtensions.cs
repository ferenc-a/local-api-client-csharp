// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kameleo.LocalApiClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for KameleoLocalApiClient.
    /// </summary>
    public static partial class KameleoLocalApiClientExtensions
    {
            /// <summary>
            /// Get the possible values for base profile filtering. We can filter the
            /// available values. With this we can see for example that what languages of
            /// profiles do we have for Windows profiles with Chrome.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceType'>
            /// Filter option for the Device Type. Possible values are 'desktop', 'mobile'.
            /// For example set it to mobile if you only want to see what os families we
            /// have for mobile profiles.
            /// </param>
            /// <param name='osFamily'>
            /// Filter option for os family. Possible values are 'windows', 'macos',
            /// 'linux', 'android', 'ios'. For example set it to windows if you only want
            /// to see what languages we have for windows profiles.
            /// </param>
            /// <param name='browserProduct'>
            /// Filter option for browser product. Possible values are 'chrome', 'firefox',
            /// 'edge', 'safari'. For example set it to safari if you only want to see what
            /// os families we have for chrome profiles.
            /// </param>
            /// <param name='language'>
            /// Filter option for os language. Use ISO 639-1 language code format. For
            /// example set it to en-gb if you only want to see what browser products we
            /// have for English profiles.
            /// </param>
            public static BaseProfileSearchParameters GetBaseProfileSearchParameters(this IKameleoLocalApiClient operations, string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string language = default(string))
            {
                return operations.GetBaseProfileSearchParametersAsync(deviceType, osFamily, browserProduct, language).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the possible values for base profile filtering. We can filter the
            /// available values. With this we can see for example that what languages of
            /// profiles do we have for Windows profiles with Chrome.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceType'>
            /// Filter option for the Device Type. Possible values are 'desktop', 'mobile'.
            /// For example set it to mobile if you only want to see what os families we
            /// have for mobile profiles.
            /// </param>
            /// <param name='osFamily'>
            /// Filter option for os family. Possible values are 'windows', 'macos',
            /// 'linux', 'android', 'ios'. For example set it to windows if you only want
            /// to see what languages we have for windows profiles.
            /// </param>
            /// <param name='browserProduct'>
            /// Filter option for browser product. Possible values are 'chrome', 'firefox',
            /// 'edge', 'safari'. For example set it to safari if you only want to see what
            /// os families we have for chrome profiles.
            /// </param>
            /// <param name='language'>
            /// Filter option for os language. Use ISO 639-1 language code format. For
            /// example set it to en-gb if you only want to see what browser products we
            /// have for English profiles.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BaseProfileSearchParameters> GetBaseProfileSearchParametersAsync(this IKameleoLocalApiClient operations, string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string language = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBaseProfileSearchParametersWithHttpMessagesAsync(deviceType, osFamily, browserProduct, language, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Filtering base profiles with some criteria. It will return X base profiles.
            /// It is not an idempotent method. This means if you are calling it twice
            /// after each other it may return a different set of base profiles.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceType'>
            /// Filter option for the Device Type. Possible values are 'desktop', 'mobile'.
            /// For example set it to mobile if you only want to get mobile profiles.
            /// </param>
            /// <param name='osFamily'>
            /// Filter option for os family. Possible values are 'windows', 'macos',
            /// 'linux', 'android', 'ios'. For example set it to windows if you only want
            /// to get Windows profiles.
            /// </param>
            /// <param name='browserProduct'>
            /// Filter option for browser product. Possible values are 'chrome', 'firefox',
            /// 'edge', 'safari'. For example set it to safari if you only want to get
            /// profiles with Safari browser.
            /// </param>
            /// <param name='language'>
            /// Filter option for os language. Use ISO 639-1 language code format. For
            /// example set it to en-gb if you only want to get English profiles.
            /// </param>
            public static IList<BaseProfilePreview> SearchBaseProfiles(this IKameleoLocalApiClient operations, string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string language = default(string))
            {
                return operations.SearchBaseProfilesAsync(deviceType, osFamily, browserProduct, language).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Filtering base profiles with some criteria. It will return X base profiles.
            /// It is not an idempotent method. This means if you are calling it twice
            /// after each other it may return a different set of base profiles.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceType'>
            /// Filter option for the Device Type. Possible values are 'desktop', 'mobile'.
            /// For example set it to mobile if you only want to get mobile profiles.
            /// </param>
            /// <param name='osFamily'>
            /// Filter option for os family. Possible values are 'windows', 'macos',
            /// 'linux', 'android', 'ios'. For example set it to windows if you only want
            /// to get Windows profiles.
            /// </param>
            /// <param name='browserProduct'>
            /// Filter option for browser product. Possible values are 'chrome', 'firefox',
            /// 'edge', 'safari'. For example set it to safari if you only want to get
            /// profiles with Safari browser.
            /// </param>
            /// <param name='language'>
            /// Filter option for os language. Use ISO 639-1 language code format. For
            /// example set it to en-gb if you only want to get English profiles.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BaseProfilePreview>> SearchBaseProfilesAsync(this IKameleoLocalApiClient operations, string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string language = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchBaseProfilesWithHttpMessagesAsync(deviceType, osFamily, browserProduct, language, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of the cookies of the profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            public static IList<BrowserCookie> ListCookies(this IKameleoLocalApiClient operations, System.Guid guid)
            {
                return operations.ListCookiesAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of the cookies of the profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BrowserCookie>> ListCookiesAsync(this IKameleoLocalApiClient operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCookiesWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a list of cookies to the profile. If cookies are already present for a
            /// domain, they will be overwritten.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='body'>
            /// </param>
            public static IList<BrowserCookie> AddCookies(this IKameleoLocalApiClient operations, System.Guid guid, IList<CookieRequest> body = default(IList<CookieRequest>))
            {
                return operations.AddCookiesAsync(guid, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a list of cookies to the profile. If cookies are already present for a
            /// domain, they will be overwritten.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BrowserCookie>> AddCookiesAsync(this IKameleoLocalApiClient operations, System.Guid guid, IList<CookieRequest> body = default(IList<CookieRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddCookiesWithHttpMessagesAsync(guid, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the cookies of the profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            public static void DeleteCookies(this IKameleoLocalApiClient operations, System.Guid guid)
            {
                operations.DeleteCookiesAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the cookies of the profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCookiesAsync(this IKameleoLocalApiClient operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCookiesWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Health check request to test if Kameleo has been started and accepting
            /// connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void Healthcheck(this IKameleoLocalApiClient operations)
            {
                operations.HealthcheckAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Health check request to test if Kameleo has been started and accepting
            /// connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HealthcheckAsync(this IKameleoLocalApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HealthcheckWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Provides information about the user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static UserInfoResponse GetUserInfo(this IKameleoLocalApiClient operations)
            {
                return operations.GetUserInfoAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Provides information about the user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserInfoResponse> GetUserInfoAsync(this IKameleoLocalApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserInfoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Terminates the Kameleo session by deauthenticating and exiting the CLI. It
            /// is important to call it after operating with Kameleo, so other users of the
            /// team account won't be logged out.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void TerminateApplication(this IKameleoLocalApiClient operations)
            {
                operations.TerminateApplicationAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Terminates the Kameleo session by deauthenticating and exiting the CLI. It
            /// is important to call it after operating with Kameleo, so other users of the
            /// team account won't be logged out.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task TerminateApplicationAsync(this IKameleoLocalApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.TerminateApplicationWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a preview list about profiles that are currently in the system.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ProfilePreview> ListProfiles(this IKameleoLocalApiClient operations)
            {
                return operations.ListProfilesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a preview list about profiles that are currently in the system.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ProfilePreview>> ListProfilesAsync(this IKameleoLocalApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProfilesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new profile based on a selected BaseProfile and inputs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProfileResponse CreateProfile(this IKameleoLocalApiClient operations, CreateProfileRequest body = default(CreateProfileRequest))
            {
                return operations.CreateProfileAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new profile based on a selected BaseProfile and inputs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProfileResponse> CreateProfileAsync(this IKameleoLocalApiClient operations, CreateProfileRequest body = default(CreateProfileRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateProfileWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates profile settings.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProfileResponse UpdateProfile(this IKameleoLocalApiClient operations, System.Guid guid, UpdateProfileRequest body = default(UpdateProfileRequest))
            {
                return operations.UpdateProfileAsync(guid, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates profile settings.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProfileResponse> UpdateProfileAsync(this IKameleoLocalApiClient operations, System.Guid guid, UpdateProfileRequest body = default(UpdateProfileRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateProfileWithHttpMessagesAsync(guid, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a profile from the system.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            public static ProfileResponse ReadProfile(this IKameleoLocalApiClient operations, System.Guid guid)
            {
                return operations.ReadProfileAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a profile from the system.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProfileResponse> ReadProfileAsync(this IKameleoLocalApiClient operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadProfileWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes profile from the system. When you are launching and stopping a big
            /// number of profiles for example for scraping it is recommended to call this
            /// after you have stopped the profile. This will free up disk space.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            public static void DeleteProfile(this IKameleoLocalApiClient operations, System.Guid guid)
            {
                operations.DeleteProfileAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes profile from the system. When you are launching and stopping a big
            /// number of profiles for example for scraping it is recommended to call this
            /// after you have stopped the profile. This will free up disk space.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteProfileAsync(this IKameleoLocalApiClient operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteProfileWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the current status of the profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            public static StatusResponse GetProfileStatus(this IKameleoLocalApiClient operations, System.Guid guid)
            {
                return operations.GetProfileStatusAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the current status of the profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StatusResponse> GetProfileStatusAsync(this IKameleoLocalApiClient operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProfileStatusWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts a profile. The browser will be launched. In case of mobile profiles
            /// and external launcher types the external spoofing engine will be launched.
            /// If successful, the profile's lifetime state will be 'running'. Otherwise
            /// the profile's lifetime state will be 'terminated'. During the api call the
            /// lifetime state can be 'starting' for a temporarily.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            public static StatusResponse StartProfile(this IKameleoLocalApiClient operations, System.Guid guid)
            {
                return operations.StartProfileAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts a profile. The browser will be launched. In case of mobile profiles
            /// and external launcher types the external spoofing engine will be launched.
            /// If successful, the profile's lifetime state will be 'running'. Otherwise
            /// the profile's lifetime state will be 'terminated'. During the api call the
            /// lifetime state can be 'starting' for a temporarily.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StatusResponse> StartProfileAsync(this IKameleoLocalApiClient operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartProfileWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stops a profile. The browsers will be stopped. In case of mobile profiles
            /// and external launcher types the external spoofing engine will be stopped.
            /// If successful, the profile's lifetime state will be 'terminated'. Otherwise
            /// the profile's lifetime state will be 'running'. During the api call the
            /// lifetime state can be 'terminating' for a temporarily.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            public static StatusResponse StopProfile(this IKameleoLocalApiClient operations, System.Guid guid)
            {
                return operations.StopProfileAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops a profile. The browsers will be stopped. In case of mobile profiles
            /// and external launcher types the external spoofing engine will be stopped.
            /// If successful, the profile's lifetime state will be 'terminated'. Otherwise
            /// the profile's lifetime state will be 'running'. During the api call the
            /// lifetime state can be 'terminating' for a temporarily.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StatusResponse> StopProfileAsync(this IKameleoLocalApiClient operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopProfileWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Saves a profile to a file. It will create a .kameleo file to the required
            /// location. It will store all the profile settings, browsing data, cookies,
            /// history, bookmarks, installed extension / addons. Later it can be reloaded.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProfileResponse SaveProfile(this IKameleoLocalApiClient operations, System.Guid guid, SaveProfileRequest body = default(SaveProfileRequest))
            {
                return operations.SaveProfileAsync(guid, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Saves a profile to a file. It will create a .kameleo file to the required
            /// location. It will store all the profile settings, browsing data, cookies,
            /// history, bookmarks, installed extension / addons. Later it can be reloaded.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProfileResponse> SaveProfileAsync(this IKameleoLocalApiClient operations, System.Guid guid, SaveProfileRequest body = default(SaveProfileRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SaveProfileWithHttpMessagesAsync(guid, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Loads a profile from a file. It will load the profile from a .kameleo file.
            /// It will load all the profile settings, browsing data, cookies, history,
            /// bookmarks, installed extension / addons.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProfileResponse LoadProfile(this IKameleoLocalApiClient operations, LoadProfileRequest body = default(LoadProfileRequest))
            {
                return operations.LoadProfileAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Loads a profile from a file. It will load the profile from a .kameleo file.
            /// It will load all the profile settings, browsing data, cookies, history,
            /// bookmarks, installed extension / addons.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProfileResponse> LoadProfileAsync(this IKameleoLocalApiClient operations, LoadProfileRequest body = default(LoadProfileRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LoadProfileWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
