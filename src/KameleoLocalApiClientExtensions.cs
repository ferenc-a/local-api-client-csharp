// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kameleo.LocalApiClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for KameleoLocalApiClient.
    /// </summary>
    public static partial class KameleoLocalApiClientExtensions
    {
            /// <summary>
            /// Retrieves the available filtering options for base profiles, including
            /// device types, operating system families, browser products, and languages.
            /// This enables you to refine the selection, for example, to see which
            /// languages are available for profiles using Windows with Chrome.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceType'>
            /// Filter option for the Device Type. Possible values are 'desktop', 'mobile'.
            /// For example set it to mobile if you only want to see what os families we
            /// have for mobile profiles.
            /// </param>
            /// <param name='osFamily'>
            /// Filter option for os family. Possible values are 'windows', 'macos',
            /// 'linux', 'android', 'ios'. For example set it to windows if you only want
            /// to see what languages we have for windows profiles.
            /// </param>
            /// <param name='browserProduct'>
            /// Filter option for browser product. Possible values are 'chrome', 'firefox',
            /// 'edge', 'safari'. For example set it to safari if you only want to see what
            /// os families we have for chrome profiles.
            /// </param>
            /// <param name='language'>
            /// Filter option for os language. Use ISO 639-1 language code format. For
            /// example set it to en-gb if you only want to see what browser products we
            /// have for English profiles.
            /// </param>
            public static BaseProfileSearchParameters GetBaseProfileSearchParameters(this IKameleoLocalApiClient operations, string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string language = default(string))
            {
                return operations.GetBaseProfileSearchParametersAsync(deviceType, osFamily, browserProduct, language).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the available filtering options for base profiles, including
            /// device types, operating system families, browser products, and languages.
            /// This enables you to refine the selection, for example, to see which
            /// languages are available for profiles using Windows with Chrome.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceType'>
            /// Filter option for the Device Type. Possible values are 'desktop', 'mobile'.
            /// For example set it to mobile if you only want to see what os families we
            /// have for mobile profiles.
            /// </param>
            /// <param name='osFamily'>
            /// Filter option for os family. Possible values are 'windows', 'macos',
            /// 'linux', 'android', 'ios'. For example set it to windows if you only want
            /// to see what languages we have for windows profiles.
            /// </param>
            /// <param name='browserProduct'>
            /// Filter option for browser product. Possible values are 'chrome', 'firefox',
            /// 'edge', 'safari'. For example set it to safari if you only want to see what
            /// os families we have for chrome profiles.
            /// </param>
            /// <param name='language'>
            /// Filter option for os language. Use ISO 639-1 language code format. For
            /// example set it to en-gb if you only want to see what browser products we
            /// have for English profiles.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BaseProfileSearchParameters> GetBaseProfileSearchParametersAsync(this IKameleoLocalApiClient operations, string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string language = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBaseProfileSearchParametersWithHttpMessagesAsync(deviceType, osFamily, browserProduct, language, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a set of 25 base profiles based on specified criteria, with the
            /// most recent browser versions at the beginning of the list. Note that
            /// calling this method multiple times will return different sets of base
            /// profiles.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceType'>
            /// Filter option for the Device Type. Possible values are 'desktop', 'mobile'.
            /// You can also use a comma-separated list to provide more than one value.
            /// </param>
            /// <param name='osFamily'>
            /// Filter option for os family. Possible values are 'windows', 'macos',
            /// 'linux', 'android', 'ios'.
            /// You can also use a comma-separated list to provide more than one value.
            /// </param>
            /// <param name='browserProduct'>
            /// Filter option for browser product. Possible values are 'chrome', 'firefox',
            /// 'edge', 'safari'.
            /// You can also use a comma-separated list to provide more than one value.
            /// </param>
            /// <param name='language'>
            /// Filter option for os language. Use ISO 639-1 language code format.
            /// For example, set it to en-gb if you want to get only English profiles from
            /// Great-Britain.
            /// You can also use a comma-separated list to provide more than one value.
            /// This field also supports wildcard for the sublanguage part: to retrieve
            /// both en-us, en-gb, and en-ca profiles, use 'en-*' as value.
            /// </param>
            public static IList<BaseProfilePreview> SearchBaseProfiles(this IKameleoLocalApiClient operations, string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string language = default(string))
            {
                return operations.SearchBaseProfilesAsync(deviceType, osFamily, browserProduct, language).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a set of 25 base profiles based on specified criteria, with the
            /// most recent browser versions at the beginning of the list. Note that
            /// calling this method multiple times will return different sets of base
            /// profiles.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceType'>
            /// Filter option for the Device Type. Possible values are 'desktop', 'mobile'.
            /// You can also use a comma-separated list to provide more than one value.
            /// </param>
            /// <param name='osFamily'>
            /// Filter option for os family. Possible values are 'windows', 'macos',
            /// 'linux', 'android', 'ios'.
            /// You can also use a comma-separated list to provide more than one value.
            /// </param>
            /// <param name='browserProduct'>
            /// Filter option for browser product. Possible values are 'chrome', 'firefox',
            /// 'edge', 'safari'.
            /// You can also use a comma-separated list to provide more than one value.
            /// </param>
            /// <param name='language'>
            /// Filter option for os language. Use ISO 639-1 language code format.
            /// For example, set it to en-gb if you want to get only English profiles from
            /// Great-Britain.
            /// You can also use a comma-separated list to provide more than one value.
            /// This field also supports wildcard for the sublanguage part: to retrieve
            /// both en-us, en-gb, and en-ca profiles, use 'en-*' as value.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BaseProfilePreview>> SearchBaseProfilesAsync(this IKameleoLocalApiClient operations, string deviceType = default(string), string osFamily = default(string), string browserProduct = default(string), string language = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchBaseProfilesWithHttpMessagesAsync(deviceType, osFamily, browserProduct, language, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the list of cookies stored in the profile's browser. Note that
            /// this list does not include session cookies, which are not persisted between
            /// browser launches.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            public static IList<BrowserCookie> ListCookies(this IKameleoLocalApiClient operations, System.Guid guid)
            {
                return operations.ListCookiesAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of cookies stored in the profile's browser. Note that
            /// this list does not include session cookies, which are not persisted between
            /// browser launches.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BrowserCookie>> ListCookiesAsync(this IKameleoLocalApiClient operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCookiesWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a list of cookies to the profile, allowing you to inject cookies
            /// before starting the profile. If cookies already exist for a domain, they
            /// will be replaced with the new ones.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='body'>
            /// </param>
            public static IList<BrowserCookie> AddCookies(this IKameleoLocalApiClient operations, System.Guid guid, IList<CookieRequest> body = default(IList<CookieRequest>))
            {
                return operations.AddCookiesAsync(guid, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a list of cookies to the profile, allowing you to inject cookies
            /// before starting the profile. If cookies already exist for a domain, they
            /// will be replaced with the new ones.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BrowserCookie>> AddCookiesAsync(this IKameleoLocalApiClient operations, System.Guid guid, IList<CookieRequest> body = default(IList<CookieRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddCookiesWithHttpMessagesAsync(guid, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes all the cookies stored in the profile, which will likely log the
            /// profile out of all websites.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            public static void DeleteCookies(this IKameleoLocalApiClient operations, System.Guid guid)
            {
                operations.DeleteCookiesAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes all the cookies stored in the profile, which will likely log the
            /// profile out of all websites.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCookiesAsync(this IKameleoLocalApiClient operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCookiesWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Health check request to test if Kameleo has been started and accepting
            /// connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void Healthcheck(this IKameleoLocalApiClient operations)
            {
                operations.HealthcheckAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Health check request to test if Kameleo has been started and accepting
            /// connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HealthcheckAsync(this IKameleoLocalApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HealthcheckWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Provides information about the user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static UserInfoResponse GetUserInfo(this IKameleoLocalApiClient operations)
            {
                return operations.GetUserInfoAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Provides information about the user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserInfoResponse> GetUserInfoAsync(this IKameleoLocalApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserInfoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Terminates the Kameleo session by deauthenticating and exiting the CLI. It
            /// is important to call it after operating with Kameleo, so other users of the
            /// team account won't be logged out.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void TerminateApplication(this IKameleoLocalApiClient operations)
            {
                operations.TerminateApplicationAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Terminates the Kameleo session by deauthenticating and exiting the CLI. It
            /// is important to call it after operating with Kameleo, so other users of the
            /// team account won't be logged out.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task TerminateApplicationAsync(this IKameleoLocalApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.TerminateApplicationWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a list of the profiles that are loaded in the current workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ProfilePreview> ListProfiles(this IKameleoLocalApiClient operations)
            {
                return operations.ListProfilesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of the profiles that are loaded in the current workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ProfilePreview>> ListProfilesAsync(this IKameleoLocalApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProfilesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new profile based on a selected BaseProfile and inputs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProfileResponse CreateProfile(this IKameleoLocalApiClient operations, CreateProfileRequest body = default(CreateProfileRequest))
            {
                return operations.CreateProfileAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new profile based on a selected BaseProfile and inputs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProfileResponse> CreateProfileAsync(this IKameleoLocalApiClient operations, CreateProfileRequest body = default(CreateProfileRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateProfileWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates profile settings.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProfileResponse UpdateProfile(this IKameleoLocalApiClient operations, System.Guid guid, UpdateProfileRequest body = default(UpdateProfileRequest))
            {
                return operations.UpdateProfileAsync(guid, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates profile settings.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProfileResponse> UpdateProfileAsync(this IKameleoLocalApiClient operations, System.Guid guid, UpdateProfileRequest body = default(UpdateProfileRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateProfileWithHttpMessagesAsync(guid, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the profile with the specified ID from the current workspace. On
            /// startup, Kameleo will automatically scan and load profiles stored in your
            /// workspace folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            public static ProfileResponse ReadProfile(this IKameleoLocalApiClient operations, System.Guid guid)
            {
                return operations.ReadProfileAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the profile with the specified ID from the current workspace. On
            /// startup, Kameleo will automatically scan and load profiles stored in your
            /// workspace folder.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProfileResponse> ReadProfileAsync(this IKameleoLocalApiClient operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadProfileWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Irreversibly deletes a profile from the current workspace, freeing up disk
            /// space and removing all associated data. It is recommended to create a
            /// backup using the export function before deleting a profile, as this
            /// operation is permanent and can result in data loss.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            public static void DeleteProfile(this IKameleoLocalApiClient operations, System.Guid guid)
            {
                operations.DeleteProfileAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Irreversibly deletes a profile from the current workspace, freeing up disk
            /// space and removing all associated data. It is recommended to create a
            /// backup using the export function before deleting a profile, as this
            /// operation is permanent and can result in data loss.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteProfileAsync(this IKameleoLocalApiClient operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteProfileWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the current status information about a profile, including its save
            /// state, lifetime state, and the connection port for profiles using an
            /// external spoofing engine.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            public static StatusResponse GetProfileStatus(this IKameleoLocalApiClient operations, System.Guid guid)
            {
                return operations.GetProfileStatusAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the current status information about a profile, including its save
            /// state, lifetime state, and the connection port for profiles using an
            /// external spoofing engine.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StatusResponse> GetProfileStatusAsync(this IKameleoLocalApiClient operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProfileStatusWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts the selected profile by transitioning its status to 'starting',
            /// launching the browser engine associated with the profile, and then changing
            /// its status to 'running'. If there is an error during start up, it will be
            /// 'terminated'. You can use the launcher property to override the browser
            /// engine before the first start.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            public static StatusResponse StartProfile(this IKameleoLocalApiClient operations, System.Guid guid)
            {
                return operations.StartProfileAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts the selected profile by transitioning its status to 'starting',
            /// launching the browser engine associated with the profile, and then changing
            /// its status to 'running'. If there is an error during start up, it will be
            /// 'terminated'. You can use the launcher property to override the browser
            /// engine before the first start.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StatusResponse> StartProfileAsync(this IKameleoLocalApiClient operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartProfileWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts the selected profile with additional command line arguments or
            /// browser profile options. The browser engine associated with the profile is
            /// launched, and then the profile's status is changed to 'running'. If there
            /// is an error during start-up, it will be 'terminated'. You can use the
            /// launcher property to override the browser engine before the first start.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='body'>
            /// </param>
            public static StatusResponse StartProfileWithOptions(this IKameleoLocalApiClient operations, System.Guid guid, WebDriverSettings body = default(WebDriverSettings))
            {
                return operations.StartProfileWithOptionsAsync(guid, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts the selected profile with additional command line arguments or
            /// browser profile options. The browser engine associated with the profile is
            /// launched, and then the profile's status is changed to 'running'. If there
            /// is an error during start-up, it will be 'terminated'. You can use the
            /// launcher property to override the browser engine before the first start.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StatusResponse> StartProfileWithOptionsAsync(this IKameleoLocalApiClient operations, System.Guid guid, WebDriverSettings body = default(WebDriverSettings), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartProfileWithOptionsWithHttpMessagesAsync(guid, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stops the selected profile and optionally releases resources. The browser
            /// engine (desktop browsers or external spoofing engine) associated with the
            /// profile is closed, and the profile's status is changed to 'terminated'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            public static StatusResponse StopProfile(this IKameleoLocalApiClient operations, System.Guid guid)
            {
                return operations.StopProfileAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops the selected profile and optionally releases resources. The browser
            /// engine (desktop browsers or external spoofing engine) associated with the
            /// profile is closed, and the profile's status is changed to 'terminated'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StatusResponse> StopProfileAsync(this IKameleoLocalApiClient operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopProfileWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Exports a profile to a file, creating a .kameleo file at the specified
            /// location. This file encapsulates everything about the profile including
            /// settings, browsing data, cookies, history, bookmarks, and any installed
            /// extensions/addons. This allows for the profile to be loaded again at a
            /// later time, and it can also be loaded into a different Kameleo instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProfileResponse ExportProfile(this IKameleoLocalApiClient operations, System.Guid guid, ExportProfileRequest body = default(ExportProfileRequest))
            {
                return operations.ExportProfileAsync(guid, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exports a profile to a file, creating a .kameleo file at the specified
            /// location. This file encapsulates everything about the profile including
            /// settings, browsing data, cookies, history, bookmarks, and any installed
            /// extensions/addons. This allows for the profile to be loaded again at a
            /// later time, and it can also be loaded into a different Kameleo instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProfileResponse> ExportProfileAsync(this IKameleoLocalApiClient operations, System.Guid guid, ExportProfileRequest body = default(ExportProfileRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportProfileWithHttpMessagesAsync(guid, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a copy of the loaded profile, which is saved to the workspace on
            /// the filesystem. The duplicated profile will have a new ID, but will retain
            /// all the settings, browsing data, cookies, history, bookmarks, and installed
            /// extensions of the original profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            public static ProfileResponse DuplicateProfile(this IKameleoLocalApiClient operations, System.Guid guid)
            {
                return operations.DuplicateProfileAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a copy of the loaded profile, which is saved to the workspace on
            /// the filesystem. The duplicated profile will have a new ID, but will retain
            /// all the settings, browsing data, cookies, history, bookmarks, and installed
            /// extensions of the original profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// The unique identifier of the profile
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProfileResponse> DuplicateProfileAsync(this IKameleoLocalApiClient operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DuplicateProfileWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Imports a profile from a .kameleo file, effectively recreating the profile
            /// with all its attributes, including settings, browsing data, cookies,
            /// history, bookmarks, and any installed extensions/addons. If the profile is
            /// already loaded, the import process will fail.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProfileResponse ImportProfile(this IKameleoLocalApiClient operations, ImportProfileRequest body = default(ImportProfileRequest))
            {
                return operations.ImportProfileAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Imports a profile from a .kameleo file, effectively recreating the profile
            /// with all its attributes, including settings, browsing data, cookies,
            /// history, bookmarks, and any installed extensions/addons. If the profile is
            /// already loaded, the import process will fail.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProfileResponse> ImportProfileAsync(this IKameleoLocalApiClient operations, ImportProfileRequest body = default(ImportProfileRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ImportProfileWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upgrades the profile to the most recent browser version available from the
            /// server, tailored to the profile's current device, browser, operating
            /// system, and language settings. Note that upgrading a profile will alter its
            /// browser fingerprint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            public static ProfileResponse UpgradeProfile(this IKameleoLocalApiClient operations, System.Guid guid)
            {
                return operations.UpgradeProfileAsync(guid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upgrades the profile to the most recent browser version available from the
            /// server, tailored to the profile's current device, browser, operating
            /// system, and language settings. Note that upgrading a profile will alter its
            /// browser fingerprint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProfileResponse> UpgradeProfileAsync(this IKameleoLocalApiClient operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpgradeProfileWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
