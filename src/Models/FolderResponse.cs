// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kameleo.LocalApiClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class FolderResponse
    {
        /// <summary>
        /// Initializes a new instance of the FolderResponse class.
        /// </summary>
        public FolderResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FolderResponse class.
        /// </summary>
        /// <param name="id">A unique identifier of the folder.</param>
        /// <param name="name">The name of the folder.</param>
        /// <param name="lastModifiedAt">Timestamp of the last
        /// modification.</param>
        /// <param name="lastModifiedBy">Name of the user who last modified the
        /// folder.</param>
        /// <param name="createdAt">Timestamp of the creation.</param>
        /// <param name="createdBy">Name of the user who created the
        /// folder.</param>
        /// <param name="profiles">List of profiles in the current
        /// folder.</param>
        /// <param name="shareAccesses">List of users accessing this
        /// folder.</param>
        public FolderResponse(System.Guid id, string name, System.DateTime lastModifiedAt, string lastModifiedBy, System.DateTime createdAt, string createdBy, IList<ProfilePreview> profiles, IList<ShareAccess> shareAccesses)
        {
            Id = id;
            Name = name;
            LastModifiedAt = lastModifiedAt;
            LastModifiedBy = lastModifiedBy;
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            Profiles = profiles;
            ShareAccesses = shareAccesses;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a unique identifier of the folder.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the name of the folder.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets timestamp of the last modification.
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedAt")]
        public System.DateTime LastModifiedAt { get; set; }

        /// <summary>
        /// Gets or sets name of the user who last modified the folder.
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedBy")]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// Gets or sets timestamp of the creation.
        /// </summary>
        [JsonProperty(PropertyName = "createdAt")]
        public System.DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or sets name of the user who created the folder.
        /// </summary>
        [JsonProperty(PropertyName = "createdBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or sets list of profiles in the current folder.
        /// </summary>
        [JsonProperty(PropertyName = "profiles")]
        public IList<ProfilePreview> Profiles { get; set; }

        /// <summary>
        /// Gets or sets list of users accessing this folder.
        /// </summary>
        [JsonProperty(PropertyName = "shareAccesses")]
        public IList<ShareAccess> ShareAccesses { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (LastModifiedBy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LastModifiedBy");
            }
            if (CreatedBy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CreatedBy");
            }
            if (Profiles == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Profiles");
            }
            if (ShareAccesses == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ShareAccesses");
            }
            if (Profiles != null)
            {
                foreach (var element in Profiles)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (ShareAccesses != null)
            {
                foreach (var element1 in ShareAccesses)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
