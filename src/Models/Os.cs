// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kameleo.LocalApiClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Os
    {
        /// <summary>
        /// Initializes a new instance of the Os class.
        /// </summary>
        public Os()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Os class.
        /// </summary>
        /// <param name="family">Specifies the operating system family.
        /// Possible values are 'windows', 'macos', 'linux', 'android',
        /// 'ios'.</param>
        /// <param name="version">The specific version of the OS. For example
        /// it helps you determine the exact version of the macOS.</param>
        /// <param name="platform">The OS's platform, indicating the processor
        /// architecture (e.g., 64-bit, 32-bit)</param>
        public Os(string family, string version, string platform)
        {
            Family = family;
            Version = version;
            Platform = platform;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specifies the operating system family. Possible values
        /// are 'windows', 'macos', 'linux', 'android', 'ios'.
        /// </summary>
        [JsonProperty(PropertyName = "family")]
        public string Family { get; set; }

        /// <summary>
        /// Gets or sets the specific version of the OS. For example it helps
        /// you determine the exact version of the macOS.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets the OS's platform, indicating the processor
        /// architecture (e.g., 64-bit, 32-bit)
        /// </summary>
        [JsonProperty(PropertyName = "platform")]
        public string Platform { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Family == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Family");
            }
            if (Version == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Version");
            }
            if (Platform == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Platform");
            }
        }
    }
}
