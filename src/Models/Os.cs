// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kameleo.LocalApiClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Os
    {
        /// <summary>
        /// Initializes a new instance of the Os class.
        /// </summary>
        public Os()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Os class.
        /// </summary>
        /// <param name="family">Family of the OS. Possible values are
        /// 'windows', 'macos', 'linux', 'android', 'ios'.</param>
        /// <param name="version">Version of the OS. For example it helps you
        /// determine the exact version of the macOS.</param>
        /// <param name="platform">Platform of the OS. Tells if it runs on 64
        /// bit or 32 bit or some other processor platform.</param>
        public Os(string family, string version, string platform)
        {
            Family = family;
            Version = version;
            Platform = platform;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets family of the OS. Possible values are 'windows',
        /// 'macos', 'linux', 'android', 'ios'.
        /// </summary>
        [JsonProperty(PropertyName = "family")]
        public string Family { get; set; }

        /// <summary>
        /// Gets or sets version of the OS. For example it helps you determine
        /// the exact version of the macOS.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets platform of the OS. Tells if it runs on 64 bit or 32
        /// bit or some other processor platform.
        /// </summary>
        [JsonProperty(PropertyName = "platform")]
        public string Platform { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Family == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Family");
            }
            if (Version == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Version");
            }
            if (Platform == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Platform");
            }
        }
    }
}
