// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kameleo.LocalApiClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents a Key-Value pair where Value can be a string or a boolean or
    /// an integer
    /// </summary>
    public partial class Preference
    {
        /// <summary>
        /// Initializes a new instance of the Preference class.
        /// </summary>
        public Preference()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Preference class.
        /// </summary>
        /// <param name="key">Key of the preference</param>
        /// <param name="value">Value of the preference. It can a string or a
        /// boolean or an integer</param>
        public Preference(string key, object value)
        {
            Key = key;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets key of the preference
        /// </summary>
        [JsonProperty(PropertyName = "key")]
        public string Key { get; set; }

        /// <summary>
        /// Gets or sets value of the preference. It can a string or a boolean
        /// or an integer
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public object Value { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Key == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Key");
            }
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}
