// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kameleo.LocalApiClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// When the WebRTC spoofing is set to manual these extra settings will be
    /// used as well.
    /// </summary>
    public partial class WebRtcSpoofingOptions
    {
        /// <summary>
        /// Initializes a new instance of the WebRtcSpoofingOptions class.
        /// </summary>
        public WebRtcSpoofingOptions()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WebRtcSpoofingOptions class.
        /// </summary>
        /// <param name="publicIp">The WebRTC public IP address of the
        /// machine.</param>
        /// <param name="privateIp">The WebRTC local IP address of the machine.
        /// It can be an obfuscated value as well.</param>
        public WebRtcSpoofingOptions(string publicIp, string privateIp = default(string))
        {
            PrivateIp = privateIp;
            PublicIp = publicIp;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the WebRTC local IP address of the machine. It can be
        /// an obfuscated value as well.
        /// </summary>
        [JsonProperty(PropertyName = "privateIp")]
        public string PrivateIp { get; set; }

        /// <summary>
        /// Gets or sets the WebRTC public IP address of the machine.
        /// </summary>
        [JsonProperty(PropertyName = "publicIp")]
        public string PublicIp { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PublicIp == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PublicIp");
            }
        }
    }
}
